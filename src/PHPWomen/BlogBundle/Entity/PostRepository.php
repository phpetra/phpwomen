<?php

namespace PHPWomen\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    /**
     * Get latest blog posts
     *
     * @param null $limit
     * @param null $offset
     * @return array
     */
    public function fetchLatestPosts($limit = null, $offset = null)
    {
        $q = $this->createQueryBuilder('p')
            ->where('p.status = :status')
            ->orderBy('p.date', 'DESC')
            ->setParameter('status', Post::STATUS_PUBLISHED)
            ->getQuery();

        if ($limit) {
            $q->setMaxResults($limit)
                ->setFirstResult($offset);
        }

        $q->execute();

        return $q->getResult();
    }

    /**
     *
     * @param Category $category
     * @param null $limit
     * @param null $offset
     * @return array
     */
    public function fetchPostsByCategoryName($category, $limit = null, $offset = null)
    {
        $q = $this->createQueryBuilder('p')
            ->innerJoin('PHPWomenBlogBundle:Category', 'c')
            ->where('c.id = p.category')
      //      ->where('p.status = :status')
//            ->where('c.name = :cat')
            ->orderBy('p.date', 'DESC')
    //        ->setParameter('status', Post::STATUS_PUBLISHED)
  //          ->setParameter('cat', $category)
            ->getQuery();

        if ($limit) {
            $q->setMaxResults($limit)
                ->setFirstResult($offset);
        }

        $q->execute();

        return $q->getResult();
    }

    public function fetchPostsByAuthor($author, $limit, $offset)
    {

    }

    /**
     * Get posts by one or more statusses
     *
     * @param array $status
     * @return Post[]
     */
    public function fetchPostsByStatus(array $status) {
        $qb = $this->createQueryBuilder('p');
        $q = $qb
            ->where($qb->expr()->in('p.status', $status))
            ->orderBy('p.date', 'desc')
            ->getQuery();

        $q->execute();

        return $q->getResult();
    }

    /**
     * Get posts between dates
     *
     * @param \DateTime $start
     * @param \DateTime $end
     * @return Post{]
     */
    public function fetchPostsBetweenDates(\DateTime $start, \DateTime $end)
    {
        $q = $this->createQueryBuilder('p')
            ->where('date >= :start')
            ->orWhere(':date <= :end')

            ->setParameter('start', $start)
            ->setParameter('end', $end)
            ->orderBy('p.date', 'desc')
            ->getQuery();

        $q->execute();

        return $q->getResult();
    }

}
